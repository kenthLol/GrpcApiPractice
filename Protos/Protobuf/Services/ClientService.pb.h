// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Services/ClientService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Services_2fClientService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Services_2fClientService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Models/Client.pb.h"
#include "Models/ServiceStatus.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Services_2fClientService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Services_2fClientService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Services_2fClientService_2eproto;
namespace GrpcApiPractice {
class ClientByIdRequest;
struct ClientByIdRequestDefaultTypeInternal;
extern ClientByIdRequestDefaultTypeInternal _ClientByIdRequest_default_instance_;
class ListClientResponse;
struct ListClientResponseDefaultTypeInternal;
extern ListClientResponseDefaultTypeInternal _ListClientResponse_default_instance_;
}  // namespace GrpcApiPractice
PROTOBUF_NAMESPACE_OPEN
template<> ::GrpcApiPractice::ClientByIdRequest* Arena::CreateMaybeMessage<::GrpcApiPractice::ClientByIdRequest>(Arena*);
template<> ::GrpcApiPractice::ListClientResponse* Arena::CreateMaybeMessage<::GrpcApiPractice::ListClientResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GrpcApiPractice {

// ===================================================================

class ClientByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcApiPractice.ClientByIdRequest) */ {
 public:
  inline ClientByIdRequest() : ClientByIdRequest(nullptr) {}
  ~ClientByIdRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientByIdRequest(const ClientByIdRequest& from);
  ClientByIdRequest(ClientByIdRequest&& from) noexcept
    : ClientByIdRequest() {
    *this = ::std::move(from);
  }

  inline ClientByIdRequest& operator=(const ClientByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientByIdRequest& operator=(ClientByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientByIdRequest* internal_default_instance() {
    return reinterpret_cast<const ClientByIdRequest*>(
               &_ClientByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientByIdRequest& a, ClientByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientByIdRequest& from) {
    ClientByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientByIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcApiPractice.ClientByIdRequest";
  }
  protected:
  explicit ClientByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // int64 client_id = 1;
  void clear_client_id();
  int64_t client_id() const;
  void set_client_id(int64_t value);
  private:
  int64_t _internal_client_id() const;
  void _internal_set_client_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:GrpcApiPractice.ClientByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class ListClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcApiPractice.ListClientResponse) */ {
 public:
  inline ListClientResponse() : ListClientResponse(nullptr) {}
  ~ListClientResponse() override;
  explicit PROTOBUF_CONSTEXPR ListClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListClientResponse(const ListClientResponse& from);
  ListClientResponse(ListClientResponse&& from) noexcept
    : ListClientResponse() {
    *this = ::std::move(from);
  }

  inline ListClientResponse& operator=(const ListClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListClientResponse& operator=(ListClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListClientResponse* internal_default_instance() {
    return reinterpret_cast<const ListClientResponse*>(
               &_ListClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListClientResponse& a, ListClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListClientResponse& from) {
    ListClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcApiPractice.ListClientResponse";
  }
  protected:
  explicit ListClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
  };
  // repeated .GrpcApiPractice.Client client = 1;
  int client_size() const;
  private:
  int _internal_client_size() const;
  public:
  void clear_client();
  ::GrpcApiPractice::Client* mutable_client(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcApiPractice::Client >*
      mutable_client();
  private:
  const ::GrpcApiPractice::Client& _internal_client(int index) const;
  ::GrpcApiPractice::Client* _internal_add_client();
  public:
  const ::GrpcApiPractice::Client& client(int index) const;
  ::GrpcApiPractice::Client* add_client();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcApiPractice::Client >&
      client() const;

  // @@protoc_insertion_point(class_scope:GrpcApiPractice.ListClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcApiPractice::Client > client_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Services_2fClientService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientByIdRequest

// int64 client_id = 1;
inline void ClientByIdRequest::clear_client_id() {
  _impl_.client_id_ = int64_t{0};
}
inline int64_t ClientByIdRequest::_internal_client_id() const {
  return _impl_.client_id_;
}
inline int64_t ClientByIdRequest::client_id() const {
  // @@protoc_insertion_point(field_get:GrpcApiPractice.ClientByIdRequest.client_id)
  return _internal_client_id();
}
inline void ClientByIdRequest::_internal_set_client_id(int64_t value) {
  
  _impl_.client_id_ = value;
}
inline void ClientByIdRequest::set_client_id(int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:GrpcApiPractice.ClientByIdRequest.client_id)
}

// -------------------------------------------------------------------

// ListClientResponse

// repeated .GrpcApiPractice.Client client = 1;
inline int ListClientResponse::_internal_client_size() const {
  return _impl_.client_.size();
}
inline int ListClientResponse::client_size() const {
  return _internal_client_size();
}
inline ::GrpcApiPractice::Client* ListClientResponse::mutable_client(int index) {
  // @@protoc_insertion_point(field_mutable:GrpcApiPractice.ListClientResponse.client)
  return _impl_.client_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcApiPractice::Client >*
ListClientResponse::mutable_client() {
  // @@protoc_insertion_point(field_mutable_list:GrpcApiPractice.ListClientResponse.client)
  return &_impl_.client_;
}
inline const ::GrpcApiPractice::Client& ListClientResponse::_internal_client(int index) const {
  return _impl_.client_.Get(index);
}
inline const ::GrpcApiPractice::Client& ListClientResponse::client(int index) const {
  // @@protoc_insertion_point(field_get:GrpcApiPractice.ListClientResponse.client)
  return _internal_client(index);
}
inline ::GrpcApiPractice::Client* ListClientResponse::_internal_add_client() {
  return _impl_.client_.Add();
}
inline ::GrpcApiPractice::Client* ListClientResponse::add_client() {
  ::GrpcApiPractice::Client* _add = _internal_add_client();
  // @@protoc_insertion_point(field_add:GrpcApiPractice.ListClientResponse.client)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcApiPractice::Client >&
ListClientResponse::client() const {
  // @@protoc_insertion_point(field_list:GrpcApiPractice.ListClientResponse.client)
  return _impl_.client_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GrpcApiPractice

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Services_2fClientService_2eproto
